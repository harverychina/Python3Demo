# -*- coding:utf8 -*-
# @Time：2021/12/1 9:33 上午
# @Author： Huang Jeff

"""
接着 l2 = l1 则表示，让变量 l1 l2 也同时指向同一个列表。这里要注意，Python 里的对象可以被多个变量所指向或引用。

"""

l1 = [1, 2, 3]
l2 = l1
l1.append(4)
print(l1)
print(l2)
"""
Python 的数据类型，例如整型（int）、字符串（string）等等，是不可变的。所以，l1发生值的变化，并不是让 l1 的值发生变化，
而是表示重新创建了一个新的值给l1，并让原来值指向l2, 所有l2仍然不变，仍然指向原来的列表。
"""
l1 = [1, 2, 3, 4, 5]
print(l1)
print(l2)
"""
变量的赋值，只是表示让变量指向了某个对象，并不表示拷贝对象给变量；而一个对象，
可以被多个变量所指向。可变对象（列表，字典，集合等等）的改变，会影响所有指向该对象的变量。
对于不可变对象（字符串、整型、元组等等），所有指向该对象的变量的值总是一样的，也不会改变。
但是通过某些操作（+= 等等）更新不可变对象的值时，会返回一个新的对象。变量可以被删除，但是对象无法被删除。
"""

"""
这里的参数传递，使变量 a 和 b 同时指向了 1 这个对象。但当我们执行到 b = 2 时，
系统会重新创建一个值为 2 的新对象，并让 b 指向它；而 a 仍然指向 1 这个对象。
所以，a 的值不变，仍然为 1。
"""


def my_func1(b):
    b = 2


a = 1
my_func1(a)
print(a)


def my_func2(b):
    b = 2
    #     通过返回改变变量值
    return b


a = 1
a = my_func2(a)
print(a)

"""
这里 l1 和 l2 先是同时指向值为[1, 2, 3]的列表。不过，由于列表可变，执行 append() 函数，对其末尾加入新元素 4 时，
变量 l1 和 l2 的值也都随之改变了。
"""


def my_func3(l2):
    l2.append(4)


l1 = [1, 2, 3]
my_func3(l1)
print(l1)

# 思考题
l1 = [1, 2, 3]
l2 = [1, 2, 3]
l3 = l2
print(id(l1))
print(id(l2))
print(id(l3))


def func(d):
    d['a'] = 10
    d['b'] = 20


d = {'a': 1, 'b': 2}
func(d)
print(d)
